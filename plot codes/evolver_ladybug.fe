
// bubble_bridge.fe
// Evolver data for bubble between plate and a pillar
// Bottom surface contact angle can be varied
//Bubble is pinned to rim of pillar. Radius can be changed
//Modulus of pillar can be changed to account for elastic deformation
//Origin at center of bubble between pillar and surface

//CHECK IF CONSTRAINT 5 IS APPLIED ON FACES. REMOVE AS PER REQUIREMENT

//IMPORTANT: Angles taken w.r.t. water (outside) for a bubble capillary bridge. For fluid bridge,
//set angles to complement value. Check "CHECK" tags in code.

//CHECK EVOLVE ROUTINE OPTIONS "gogo" BELOW! UNCOMMENT ACCORDINGLY!

//parameter top_angle = 120    // pinning angle (top)
parameter bottom_angle = 130 // contact angle (bottom)
parameter pin_radius = 1.440965 // pinning radius
parameter height = 1.8    // current separation of plates (SET EQUAL TO height_start!)
parameter y_modulus = 1E6  // Young's modulus (Y*s/gamma), inverse of elastocapillary number (stiff: 1e6)
parameter aspect_ratio = 1 //aspect ratio h/2r
parameter height_start = 0.3    // initial separation of plates
parameter height_end = 0.5    // final separation of plates
parameter dh = 0.025 //height step size
parameter pillar_height = 2*pin_radius*aspect_ratio

//pressure 10 //ideal gas model, non-dimensionalized as P/(y/s)

gravity_constant 0  // start with gravity off

keep_macros

view_matrix // view focus on bridge
1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1.5

#define vol 4*pi/3
#define width (vol/height)^0.5
//#define pillar_height 2*pin_radius*aspect_ratio

// Contact surface tensions
//#define UPPERT  (cos(top_angle*pi/180))  // virtual tension of facet on plane
#define LOWERT (cos(bottom_angle*pi/180))

quantity upper_length info_only method edge_scalar_integral  // top contact length
scalar_integrand: 1

quantity lower_length info_only method edge_scalar_integral  // bottom contaact length
scalar_integrand: 1

quantity upper_area info_only method edge_vector_integral  // top contact area
vector_integrand:
q1: 0
q2: x
q3: 0

quantity lower_area info_only method edge_vector_integral  // bottom contact area
vector_integrand:
q1: 0
q2: x
q3: 0

quantity mean_c info_only method mean_curvature_integral  // mean curvature

constraint 1 /* the lower plate */
formula: z = -height/2
energy:  // for contact angle
e1: -(LOWERT*y) //+ G*z^2/2*y
e2: 0
e3: 0
content: //volume correction
c1: 0
c2: -z*x
c3: 0

constraint 2/* the upper plate */
formula: z = height/2
//energy:  // for contact angle and gravitational energy under missing facets
//e1: -(UPPERT*y) //+ G*z^2/2*y
//e2: 0
//e3: 0 
content:
c1: z*y
c2: 0
c3: 0

constraint pinned convex/* pinning constraint */
formula: x^2 + y^2 = pin_radius^2

//constrain all vertices to lie between plates (not used)
constraint 3 nonpositive 
formula: z = (height/2)

constraint 4 nonnegative 
formula: z = -(height/2)

//constrain vertices to lie outside pillar region (include in faces only) CHECK!
constraint 5 nonnegative //USE ONLY FOR SMALL HEIGHT AND HYDROPHILIC SURFACE!!
formula: x^2 + y^2 = pin_radius^2

//constraint plates (not needed)
constraint lower_plate
formula: z = -height/2

constraint upper_plate
formula: z = height/2

constraint pillar_top
formula: z = pillar_height+height/2

// for restoring after perturbation
define vertex attribute old_coord real[3]


vertices
    1   -width/2  -width/2 -height/2  constraint 1,4  /* 4 vertices on lower plate */
    2   width/2  -width/2 -height/2  constraint 1,4
    3   width/2  width/2 -height/2  constraint 1,4
    4   -width/2  width/2 -height/2  constraint 1,4
    5   -width/2  -width/2 height/2  constraint 2,4,pinned  /* upper plate */
    6   width/2  -width/2 height/2  constraint 2,4,pinned
    7   width/2  width/2 height/2  constraint 2,4,pinned
    8   -width/2  width/2 height/2  constraint 2,4,pinned
    13   2  2 -height/2 fixed constraint lower_plate/* for lower plane */
    14  2 -2 -height/2 fixed constraint lower_plate
    15 -2 -2 -height/2 fixed constraint lower_plate
    16 -2  2 -height/2 fixed constraint lower_plate
    17   -width/2  -width/2 height/2  constraint upper_plate,pinned  /* pillar */
    18   width/2  -width/2 height/2  constraint upper_plate,pinned
    19   width/2  width/2 height/2  constraint upper_plate,pinned
    20   -width/2  width/2 height/2  constraint upper_plate,pinned
    21   -width/2  -width/2 pillar_height+height/2  constraint pillar_top,pinned
    22   width/2  -width/2 pillar_height+height/2  constraint pillar_top,pinned
    23   width/2  width/2 pillar_height+height/2  constraint pillar_top,pinned
    24   -width/2  width/2 pillar_height+height/2  constraint pillar_top,pinned

edges  /* given by endpoints and attribute */
    1   1 2    constraint 1,4 color green lower_length lower_area mean_c/* 4 edges on lower plate */
    2   2 3    constraint 1,4 color green lower_length lower_area mean_c
    3   3 4    constraint 1,4 color green lower_length lower_area mean_c
    4   4 1    constraint 1,4 color green lower_length lower_area mean_c
    5   5 6    constraint 2,4,pinned color red upper_length upper_area mean_c /* upper plate */
    6   6 7    constraint 2,4,pinned color red upper_length upper_area mean_c
    7   7 8    constraint 2,4,pinned color red upper_length upper_area mean_c
    8   8 5    constraint 2,4,pinned color red upper_length upper_area mean_c
    13  1 5 constraint 4 mean_c 
    15 2 6 constraint 4 mean_c
    17 3 7 constraint 4 mean_c
    19 4 8 constraint 4 mean_c
    21 13 14 no_refine  fixed constraint lower_plate  /* for lower plane */
    22 14 15 no_refine  fixed constraint lower_plate
    23 15 16 no_refine  fixed constraint lower_plate
    24 16 13 no_refine  fixed constraint lower_plate
    25 17 18 tension 0  constraint upper_plate,pinned /* pillar */
    26 18 19 tension 0  constraint upper_plate,pinned
    27 19 20 tension 0  constraint upper_plate,pinned
    28 20 17 tension 0  constraint upper_plate,pinned
    29 21 22 tension 0 constraint pillar_top,pinned
    30 22 23 tension 0 constraint pillar_top,pinned
    31 23 24 tension 0 constraint pillar_top,pinned
    32 24 21 tension 0 constraint pillar_top,pinned
    33 17 21 tension 0 constraint pinned
    34 18 22 tension 0 constraint pinned
    35 19 23 tension 0 constraint pinned
    36 20 24 tension 0 constraint pinned

faces  /* given by oriented edge loop */
    1  1 15 -5  -13 constraint 4 frontcolor lightblue //Add constraint 5 here for log heights
    2  2 17 -6 -15 constraint 4 frontcolor lightblue 
    3  3 19 -7 -17 constraint 4 frontcolor lightblue 
    4  4  13 -8 -19 constraint 4 frontcolor lightblue 
    5 25 34 -29 -33 tension 0 constraint pinned frontcolor red //top pillar
    6 26 35 -30 -34 tension 0 constraint pinned frontcolor red
    7 27 36 -31 -35 tension 0 constraint pinned frontcolor red
    8 28 33 -32 -36 tension 0 constraint pinned frontcolor red

bodies  /* one body, defined by its oriented faces */
    1   1 2 3 4    volume vol density 1
    //    2   5 6 7 8 density 0


//----------------------SCRIPT----------------------//
read

set background white;

set edge color clear where on_constraint pinned;

//color formatting
set face color lightred where on_constraint pinned;
set face color yellow where on_constraint 4;
set edge color clear;


re := { refine edges where on_constraint 1 or on_constraint pinned}

// Evolve for low heights <0.5 (set as gogo when needed)
//gogo := {re; g2; 
//    {r; u; V; g 2;} 3;
//    U;g20;U;
//        scale_val := scale;
//        set edge color clear where on_constraint pinned;
//        }

//gogo := {re; g2; 
//    {r; u; V; g 2;} 3;
//    g100;U;g20;U;
//        scale_val := scale;
//        set edge color clear where on_constraint pinned;
//        }
    
// Evolve for high heights > 0.5 (set as gogo when needed)    
gogo := {g5; re; g5; 
        {r; u; V; g 10;} 3;
        g100;U;g100;U;
        scale_val := scale;
        set edge color clear;
        }
      
// For saving coordinates before perturbation
save_coords := { foreach vertex vv do
                    { set vv.old_coord[1] x;
                      set vv.old_coord[2] y;
                      set vv.old_coord[3] z;
                    }
                }

// For restoring coordinates after perturbation
restore_coords := { foreach vertex vv do
                       { set vv.x old_coord[1];
                         set vv.y old_coord[2];
                         set vv.z old_coord[3];
                        }
                   }

// Force by central difference of energy minima
compute_force := { save_coords;
                dheight := 0.000001;
                height := height - dheight;
                optimize 1; 
                g100;
                lo_energy := total_energy;
                restore_coords;
                height := height + 2*dheight;
                g100;
                hi_energy := total_energy;
                restore_coords;
                height := height - dheight;
                force1 := -(hi_energy - lo_energy)/2/dheight/2/pi;
                /*force calculated by pressure and angle at bottom surface*/
                force2 := (((body[1].pressure-ambient_pressure_value)*lower_area.value)-
                            (lower_length.value*sin(bottom_angle*pi/180)))/2/pi;
                /*force1a := -(hi_energy - lo_energy)/2/dheight;*/
                printf "%-#2.6g\t%-#2.3g\t%-#2.3g\t%-#20.15g\n", 
                height,force1,force2,scale_val;
            }

//compute minimum and maximum radius
compute_neck := {   
                min_radius := 1e12;
                max_radius := -1;
                
                foreach vertex vv where on_constraint 4 do 
                {
                    vertex_radius := sqrt(vv.x^2 + vv.y^2);
                    min_radius := minimum(min_radius,vertex_radius);
                    max_radius := maximum(max_radius,vertex_radius);
                    };
                }
            
//compute contact angle of water at pinned contact line
compute_angle := {
    angle_sum := 0;
    ind := 0;
            foreach vertex vv where on_constraint 2 do
        {   
            if vv.vertex_normal[1]*vv.x > 0 or vv.vertex_normal[2]*vv.y > 0 then 
            {angle_sum := angle_sum+acos(vv.vertex_normal[3]);}
            else
            {angle_sum := angle_sum-acos(vv.vertex_normal[3]);};
            ind++;
        };
        pin_angle := (angle_sum/ind)*180/pi;//take average
        }
    
//force-distance data        
curve := {
        quiet on;
        
    define ba_list integer[1]; //ARRAY SIZE CHECK!!!
    //ba_list := {24, 120}; //BOTTOM ANGLE LIST
    //ba_list := {30, 130, 174, 179};
    ba_list := {30};
        
        for (jnx := 1; jnx <= sizeof(ba_list); jnx++)  
        { 
            bottom_angle := ba_list[jnx];
            
            printf "Height:\tForce:\tForce_Calc:\tScale\n";
            
            num := 1+abs((height_end-height_start)/dh);
            if height_end > height_start then {h_step := dh;} else {h_step := -dh;};

            // save data
            outdir := "E:/Work/Surface Evolver/Data/Bubble_Bridge/20201123 constant total fluid volume/D_d=70/fluid/"; //CHECK OUTPUT DIRECTORY
            params := sprintf "pr%g_ba%03g_ym%g_ar%g_ap%g",pin_radius,
                      bottom_angle,y_modulus,aspect_ratio,ambient_pressure_value; //fixed parameters for filenames
            outname := sprintf "%sdata-%s_hi%2.6g_hf%2.6g.txt",outdir,
                       params,height_start,height_end;
            printf "Bottom_Angle\tPin_Radius\tElastic_Modulus\tAspect_Ratio\tAmbient_Pressure\t"
                    "Height\tBase_Height\tHeight_Final\tStrain\tForce\tForce_Calc\t"
                   "Energy\tArea\tScale\tVolume\tPressure\tBottom_Length\t"
                   "Top_Length\tBottom_Area\tTop_Area\tMean_Curvature\t"
                   "Min_Radius\tMax_Radius\tPinning_Angle\tIterations\n"
                    >> outname;
                    //local inx;
 
            total_deform := 0;
            height_deform := 1;
            h_diff := 1;
            h_init := height_start;
            deform_newer := h_init;
            h_bound1 := -100;
            h_bound2 := 100;
            inx := 1;
            knx := 0;
            min_radius := 1e12;
            min_radius_tol := 0.01; //radius of rupture
            dataline := "";    
            while inx <= num do
            {   
                replace_load datafilename;
                if abs(h_diff) > 0.0001 then //converge elastic deformation        
                { 
                    if deform_newer < h_bound1 then {height := h_bound1;} 
                    else if deform_newer >h_bound2 then {height := h_bound2;}
                    else{height := deform_newer;};
               } 
                else
                    {printf "%s",dataline >> outname;
                     height := height_start+inx*h_step;
                     h_init := height;                     
                     total_deform := 0;
                     deform_newer := 0;
                     knx := 0;
                     min_radius := 1e12;
                     inx++;};
                pillar_height := (2*pin_radius*aspect_ratio)-total_deform; //update pillar height
                if inx > num then {break;};
                if knx = 2 or min_radius < min_radius_tol then {height_deform := 0; h_diff := 0; continue;}; //CHECK! maximum 2 iterations
                bottom_angle := ba_list[jnx];
                recalc;
                gogo; //evolve
                set edge color clear where on_constraint pinned;            

                compute_force; //calculate force
                compute_neck; //calculate neck sizes (min and max)
                compute_angle; //calculate top contact angle
                
                if min_radius < min_radius_tol then {force2 := 0;}; //set force as zero after rupture

                h_base := h_init+(aspect_ratio*2*pin_radius);//height from substrate to pillar base
                strain := -total_deform/(aspect_ratio*2*pin_radius);
                
                dataline:= sprintf "%g\t%-#2.3g\t%g\t%-#2.3g\t%g\t%-#2.6g\t%-#2.6g\t"
                                "%-#2.6g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t"
                                "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t"
                                "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%g\t%-#20.15g\t%d\n", 
                                bottom_angle,pin_radius,y_modulus,aspect_ratio,ambient_pressure_value,h_init,h_base,
                                height,strain,force1,force2,total_energy,total_area,scale_val, body[1].volume,
                                body[1].pressure,lower_length.value,upper_length.value,lower_area.value, 
                                upper_area.value,mean_c.value,min_radius,max_radius,pin_angle,knx+1; 
                
                //CHECK force1 or force2 for deformation calculation
                height_deform := (2*pi*force2*(2*pin_radius*aspect_ratio)/(y_modulus*pi*pin_radius^2))-total_deform; 
                total_deform := total_deform + height_deform;
                
                if knx = 0 then 
                    {deform_prev := h_init; 
                     deform_new := h_init;
                     //don't let heights go beyond 0.3,1.8. CHECK!
                     deform_newer := maximum(minimum(h_init+(total_deform/aspect_ratio),1.8),0.3);//divided by aspect ratio for faster convergence
                    force_prev := force2; 
                    force_new := force2;
                    //height limits within which solution must lie in
                    h_bound1 := minimum(deform_new,deform_newer);
                    h_bound2 := maximum(deform_new,deform_newer);
                    }
                else
                    {deform_prev := deform_new;
                     deform_new := deform_newer; 
                    force_prev := force_new; 
                    force_new := force2;
                    k_ratio := (force_new-force_prev)/(deform_new-deform_prev);
                    k_elastic := (y_modulus*pi*pin_radius^2)/(2*pin_radius*aspect_ratio);
                    //secant method
                    deform_newer := ((deform_prev*k_ratio)-(k_elastic*h_init)-force_prev)/(k_ratio-k_elastic);
                    };
                h_diff := deform_newer - deform_new;
                knx++;
                /* save dump file */
                if abs(h_diff) < 0.0001 then
                {dump sprintf "%s%s_dump%03u-h%2.6g.dmp",outdir,
                                params,inx,height;};
            };
         };
        quiet off;

        }

gogo2 := { g; re; g; 
          {r; u; V; g 10;} 3;
          g100;
          scale_val := scale;
        }
      
//printf "True force: %-#20.15g\\n",-2*pi*rmax/cosh(zmax);
//// Evolution with 45 degree contact angle
//gogo2 := { angle := 45; re; g 5; V;V; r; g 5; V;V; r; g 5; hessian; hessian; }
//
//// Evolution with  90 contact and high gravity
//gogo3 := { angle := 90; G 5; re; g 5; r; g 5; r; g 5; hessian; hessian; }
//
//// Evolution with  90 contact and negative gravity, i.e. pendant drop
//gogo4 := { angle := 90; G -2; re; g 5; r; g 5; r; g 5; hessian; hessian; }
//
//// Pendant drop falling off ceiling
//gogo5 := { angle := 90; G -5; re; g 10; t .1; unset vertex constraint 1; g 3; }


